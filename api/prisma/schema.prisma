


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id       String  @id @default(uuid())
  admin    Admin?  @relation(fields: [id], references: [id], map: "User_Admin_fkey")
  teacher  Teacher? @relation(fields: [id], references: [id], map: "User_Teacher_fkey")
  student  Student? @relation(fields: [id], references: [id], map: "User_Student_fkey")
  parent   Parent?  @relation(fields: [id], references: [id], map: "User_Parent_fkey")
}

model Admin {
  id       String @id @default(uuid())
  name String @unique
  email    String @unique
  password String
  user User[] 
}

model Student {
  id          String       @id @default(uuid())
  name        String
  surname     String
  email       String?      @unique
  password    String
  phone       String?      @unique
  address     String
  img         String?
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String?
  parent      Parent?       @relation(fields: [parentId], references: [id])
  groupId     Int?
  group       Group?        @relation(fields: [groupId], references: [id])
  attendances Attendance[]
  results     Result[]
  studentTasks StudentTask[]

  User User[]
}

model Teacher {
  id        String   @id @default(uuid())
  name      String
  surname   String
  email     String?   @unique
  password  String
  phone     String?   @unique
  address   String
  img       String?
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  groups   Group[]
  birthday  DateTime
  User User[]
}

model Parent {
  id        String   @id @default(uuid())
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  password String?
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
  User User[]
}



model Group {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int
  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime
  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  groupId     Int
  group       Group        @relation(fields: [groupId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
  tasks       Task[]
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  dueDate     DateTime
  totalMarks  Int
  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  studentTasks StudentTask[]
}

model StudentTask {
  id       Int     @id @default(autoincrement())
  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  taskId Int
  task   Task   @relation(fields: [taskId], references: [id])
  marksObtained Int
  submittedAt   DateTime?
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int
  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean
  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  groupId Int?
  group   Group? @relation(fields: [groupId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  groupId Int?
  group   Group? @relation(fields: [groupId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
enum UserRole {
  ADMIN
  STUDENT
  TEACHER
  PARENT
}