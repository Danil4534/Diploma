


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id        String  @id @default(uuid())
  name      String?
  surname   String?
  email     String? @unique
  password  String?
  phone     String? @unique
  address   String?
  img       String?
  sex       UserSex?
  messages  Message[]
  created   DateTime @default(now())
  admin     admin?  @relation
  student   student? @relation
  teacher   teacher? @relation
  parent    parent? @relation
}
model Message{
  id Int @id @default(autoincrement())
  content String
  created DateTime @default(now())
  userId String
  user user @relation(fields: [userId], references: [id])
}
model admin {
  id        String  @id @default(uuid())
  phone     String @unique
  address   String
  img       String
  created   DateTime @default(now())
  user      user?   @relation(fields: [userId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  userId    String? @unique 
}

model student {
  id          String       @id @default(uuid())
  phone       String?     @unique
  address     String?
  img         String?
  info        String
  sex         UserSex?
  user        user   @relation(fields: [userId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  userId      String @unique 
  created     DateTime?    @default(now())
  parentId    String?
  parent      parent?       @relation(fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  groupId     Int?
  group       group?        @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attendances attendance[]
  results     result[]
  studentTasks studentTask[]

}

model teacher {
  id        String   @id @default(uuid())
  phone     String?   @unique
  address   String
  img       String?
  info        String
  sex       UserSex

  user      user?   @relation(fields: [userId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  userId    String? @unique 
  created DateTime?  @default(now())
  subjects  subject[]
  lessons   lesson[]
  groups   group[]
  
}

model parent {
  id        String   @id @default(uuid())
  phone     String?    @unique
  img       String?
  info      String
  sex       UserSex
  address   String?
  created DateTime?  @default(now())
  user      user?   @relation(fields: [userId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  userId    String? @unique 
  students  student[]

}



model group {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int 

  supervisorId  String?
  supervisor    teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       lesson[]
  students      student[]
  events        event[]
  announcements announcement[]
}

model subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers teacher[]
  lessons  lesson[]
}

model lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime
  subjectId   Int
  subject     subject      @relation(fields: [subjectId], references: [id])
  groupId     Int
  group       group        @relation(fields: [groupId], references: [id])
  teacherId   String
  teacher     teacher      @relation(fields: [teacherId], references: [id])
  exams       exam[]
  assignments assignment[]
  attendances attendance[]
  tasks       task[]
}

model task {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  dueDate     DateTime
  totalMarks  Int
  lessonId Int
  lesson   lesson   @relation(fields: [lessonId], references: [id])
  studentTasks studentTask[]
}

model studentTask {
  id       Int     @id @default(autoincrement())
  studentId String
  student   student @relation(fields: [studentId], references: [id])
  taskId Int
  task   task   @relation(fields: [taskId], references: [id])
  marksObtained Int
  submittedAt   DateTime?
}

model exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   lesson   @relation(fields: [lessonId], references: [id])
  results  result[]
}

model assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId Int
  lesson   lesson   @relation(fields: [lessonId], references: [id])
  results  result[]
}

model result {
  id    Int @id @default(autoincrement())
  score Int
  examId       Int?
  exam         exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      student     @relation(fields: [studentId], references: [id])
}

model attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean
  studentId String
  student   student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    lesson  @relation(fields: [lessonId], references: [id])
}

model event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  groupId Int?
  group   group? @relation(fields: [groupId], references: [id])
}

model announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  groupId Int?
  group   group? @relation(fields: [groupId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
