generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  name         String?
  surname      String?
  email        String?     @unique
  phone        String?     @unique
  password     String?
  img          String?
  sex          UserSex?
  info         String?
  banned       Boolean?    @default(false)
  activeStatus UserStatus? @default(Offline)
  roles        Role[]      @default([Student])
  chats        Chat[]
  created      DateTime?   @default(now())
  Group        Group?      @relation(fields: [groupId], references: [id])
  groupId      String?

  Comment   Comment[]
  GradeBook GradeBook[]
}

model Message {
  id      String   @id @default(uuid())
  content String
  created DateTime @default(now())
  userId  String
  Chat    Chat?    @relation(fields: [chatId], references: [id])
  chatId  String?
}

model Chat {
  id       String    @id @default(uuid())
  user     User?     @relation(fields: [userId], references: [id])
  userId   String?
  messages Message[]
}

model Group {
  id           String         @id @default(uuid())
  userId       String?
  name         String
  students     User[]
  Subject      Subject[]
  capacity     Int
  Events       Event[]
  Announcement Announcement[]
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  status      String
  created     DateTime
  Group       Group?   @relation(fields: [groupId], references: [id])
  groupId     String?
}

model Subject {
  id          String      @id @default(uuid())
  name        String
  description String
  lessons     Lesson[]
  tasks       Task[]
  groups      Group       @relation(fields: [groupId], references: [id])
  groupId     String
  userId      String?
  GradeBook   GradeBook[]
}

model Lesson {
  id             String   @id @default(uuid())
  title          String
  description    String
  startTime      DateTime
  endTime        DateTime
  linkForMeeting String
  tasks          Task[]
  created        DateTime
  Subject        Subject? @relation(fields: [subjectId], references: [id])
  subjectId      String?
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String
  type        TypeTask
  startTime   DateTime
  endTime     DateTime
  grade       Int
  comments    Comment[]
  Lesson      Lesson?   @relation(fields: [lessonId], references: [id])
  lessonId    String?
  Subject     Subject?  @relation(fields: [subjectId], references: [id])
  subjectId   String?
}

model Comment {
  id      String  @id @default(uuid())
  content String
  user    User    @relation(fields: [userId], references: [id])
  Task    Task?   @relation(fields: [taskId], references: [id])
  taskId  String?
  userId  String
}

model GradeBook {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String
}

enum TypeTask {
  Test
  Default
}

enum UserStatus {
  Online
  Offline
}

enum Role {
  Admin
  Student
  Teacher
  Parent
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  Saturday
  Sunday
}
